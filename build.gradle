buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath files('libs/code-gen-gradle-plugin-0.2.2.25.jar')
    classpath files('libs/edu.kit.ifv.codegen-0.2.2.90.jar')
  }
  
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group = 'edu.kit.ifv.mobitopp'
wrapper.gradleVersion = '5.2'

sourceCompatibility = 1.12
targetCompatibility = 1.12

repositories {
    mavenLocal()
    mavenCentral()
	flatDir {
		dirs 'libs'
	}
}

configurations.all {
    exclude group: 'xerces', module: 'xerces'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    implementation 'edu.kit.ifv.mobitopp:actitopp:1.9+',
    		       'edu.kit.ifv.mobitopp:mobitopp:0.2.3.+',
                   'net.sf.opencsv:opencsv:2.3'
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0',
                       'org.hamcrest:hamcrest-all:1.3',
                	     'org.assertj:assertj-core:3.15.0',
                       'org.mockito:mockito-core:3.3.0',
                       'org.mockito:mockito-junit-jupiter:3.3.0'
}

apply plugin: 'edu.kit.ifv.codegen.gradle.plugin'
codeGenInp {
  outputDir = "${rootDir}/src/main/java"
  files = [
//            "${rootDir}/config/choice-models/access-carsharing.gen",
//            "${rootDir}/config/choice-models/access-public-transport.gen",
//            "${rootDir}/config/choice-models/bikesharing-membership.gen",
//            "${rootDir}/config/choice-models/car-ownership.gen",
            "${rootDir}/config/choice-models/carsharing_membership.gen",
            "${rootDir}/config/choice-models/destination-choice.gen",
            "${rootDir}/config/choice-models/mode_choice_mixed_logit_mode_preference.gen",
            "${rootDir}/config/choice-models/mode_choice_mixed_logit_time_sensitivity.gen",
            "${rootDir}/config/choice-models/mode_choice_mixed_logit.gen",
//            "${rootDir}/config/choice-models/transit_pass_ownership.gen"
           ]
}

compileJava.dependsOn('generateCode')

def createLongTermModuleTask(taskName, configurationFile) {
    def composedTaskName = "run${taskName}_LongTermModule"
    return tasks.create(composedTaskName, JavaExec) {
        args "config/${configurationFile}"
        main = "edu.kit.ifv.mobitopp.populationsynthesis.LongTermModuleStarter"
    }
}

def createShortTermModuleTask(taskName, configurationFile) {
    def composedTaskName = "run${taskName}_ShortTermModule"
    return tasks.create(composedTaskName, JavaExec) {
        args "config/${configurationFile}"
        main = "edu.kit.ifv.mobitopp.simulation.ShortTermModule"
    }
}




def longTermRuns = Map.of(
"Rastatt", "rastatt/long-term-module.yaml"
)
for (entry in longTermRuns) {
	createLongTermModuleTask(entry.getKey(), entry.getValue())
}



def shortTermRuns = new LinkedHashMap()
shortTermRuns.put("Rastatt_1p", "rastatt/short-term-module-1p.yaml")
shortTermRuns.put("Rastatt_10p", "rastatt/short-term-module-10p.yaml")
shortTermRuns.put("Rastatt_100p", "rastatt/short-term-module-100p.yaml")

for (entry in shortTermRuns) {
	createShortTermModuleTask(entry.getKey(), entry.getValue())
}

tasks.withType(JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    dependsOn check
    enableAssertions = "true"
    group = "application"
    maxHeapSize = "75G"
    jvmArgs '-Xss512M'
    jvmArgs '-XX:+UseG1GC'
    jvmArgs '-Dnashorn.args="--no-deprecation-warning"'
    jvmArgs '-Xmx4G'
    jvmArgs '-Xms4G'
}

task createRunFiles {
    dependsOn build
    println("Creating run files")
    mkdir "${rootDir}/run"
    tasks.each {t ->
        if(t.group == 'application') {
            def name = t.name
            println("create file for: ${name}")
            new File("${rootDir}/run/run-${name}.bat").text = 
"""
cd ..
call gradlew.bat clean --refresh-dependencies dependencies build $name
pause
"""

			new File("${rootDir}/run/run-${name}.sh").text = 
"""
#!/bin/bash
cd ..
./gradlew clean --refresh-dependencies dependencies build $name
read
"""
        }
    }
}
configure(createRunFiles) {
    group='help'
    description = 'Creates .bat and .sh starter files for each application task'
}